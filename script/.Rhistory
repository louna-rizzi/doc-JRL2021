YJ2<- YJ1*0.7 + 0.3*rnorm(500, mean=170, sd=40)
plot(YJ1,YJ2)
YJ1 = rnorm(300, mean=179, sd=40**0.5)
YJ2<- YJ1*0.7 + 0.3*rnorm(300, mean=170, sd=40)
YJ1 = rnorm(300, mean=179, sd=40**0.5)
YJ2<- YJ1*0.7 + 0.3*rnorm(300, mean=170, sd=40**0.5)
plot(YJ1,YJ2)
lm(YJ1 ~YJ2 )
anova(lm(YJ1 ~YJ2 ))
cov(YJ1, YJ2)
beta <-cov(YJ1, YJ2)
V1 <-var(YJ1)
V1 <-var(YJ1)
V2 <- var(YJ2)
pente <-cov(YJ1, YJ2) / V1
pente
r<- cov(YJ1, YJ2) / (V1*V2)**0.5
r
r*r
anova(lm(YJ1 ~YJ2 ))
summary(anova(lm(YJ1 ~YJ2 )))
summary(lm(YJ1 ~YJ2 ))
r*r
summary(lm(YJ1 ~ -1 + YJ2 ))
YJ1 = rnorm(300, mean=179, sd=40**0.5)
YJ2<- YJ1*0.7 + 0.3*rnorm(300, mean=0, sd=40**0.5)
plot(YJ1,YJ2)
V1 <-var(YJ1)
V2 <- var(YJ2)
pente <-cov(YJ1, YJ2) / V1
pente
r<- cov(YJ1, YJ2) / (V1*V2)**0.5
r*r
summary(lm(YJ1 ~  YJ2 ))
summary(lm(YJ1 ~ -1 + YJ2 ))
YJ1 = rnorm(300, mean=179, sd=40**0.5)
YJ2<- YJ1*0.7 + rnorm(300, mean=0, sd=10**0.5)
plot(YJ1,YJ2)
V1 <-var(YJ1)
V2 <- var(YJ2)
pente <-cov(YJ1, YJ2) / V1
r<- cov(YJ1, YJ2) / (V1*V2)**0.5
r*r
summary(lm(YJ1 ~  YJ2 ))
YJ1 = rnorm(300, mean=179, sd=40**0.5)
YJ2<- YJ1*0.7 + rnorm(300, mean=0, sd=(0.3*40)**0.5)
plot(YJ1,YJ2)
Moyenne<- 169
Variance <- 157
YJ1 = rnorm(300, mean=Moyenne, sd=Variance**0.5)
Pente<-0.7
YJ2<- YJ1*Pente + rnorm(300, mean=0, sd=((1-Pente)*Variance)**0.5)
plot(YJ1,YJ2)
((1-Pente)*Variance)
((1-Pente)*Variance)**0.5
Moyenne<- 169
Variance <- 57
YJ1 = rnorm(300, mean=Moyenne, sd=Variance**0.5)
# Prenons un modèle pour générer la taille du second jumeau J2 = Pente x J1 + erreur
Pente<-0.7
YJ2<- YJ1*Pente + rnorm(300, mean=0, sd=((1-Pente)*Variance)**0.5 )
((1-Pente)*Variance)**0.5
plot(YJ1,YJ2)
Variance**0.5
YJ1 = rnorm(300, mean=Moyenne, sd=Variance**0.5 )
V1 <-var(YJ1)
V1
V2 <- var(YJ2)
V2
(1-Pente)
pente <-cov(YJ1, YJ2) / V1
pente
V1 <-var(YJ1)
V2 <- var(YJ2)
V1 <-var(YJ1)
V2 <- var(YJ2)
pente <-cov(YJ1, YJ2) / V1
pente
plot(YJ1,YJ2)
Moyenne<- 169
Variance <- 57
YJ1 = rnorm(300, mean=Moyenne, sd=Variance**0.5 )
Pente<-0.7
YJ2<- YJ1*Pente + rnorm(300, mean=0, sd=((1-Pente)*Variance)**0.5 )
plot(YJ1,YJ2)
V1 <-var(YJ1)
V2 <- var(YJ2)
pente <-cov(YJ1, YJ2) / V1
pente
r<- cov(YJ1, YJ2) / (V1*V2)**0.5
r
r*r
summary(lm(YJ1 ~ -1 + YJ2 ))
summary(lm(YJ1 ~  YJ2 ))
plot(YJ1,YJ2)
abline(a=0, b=Pente)
Estim.pente <-cov(YJ1, YJ2) / V1
R2<-r*r
r<- cov(YJ1, YJ2) / (V1*V2)**0.5
R2<-r*r
summary(lm(YJ1 ~  YJ2 ))
summary(lm(YJ1 ~  YJ2 ))
# Paires de jumeaux
Paires<-1000
Moyenne<- 169
Variance <- 57
# Paires de jumeaux
Paires<-1000
YJ1 = rnorm(Paires, mean=Moyenne, sd=Variance**0.5 )
# Prenons un modèle pour générer la taille du second jumeau J2 = Pente x J1 + erreur
Pente<-0.7
YJ2<- YJ1*Pente + rnorm(Paires, mean=0, sd=((1-Pente)*Variance)**0.5 )
plot(YJ1,YJ2)
abline(a=0, b=Pente)
plot(YJ1,YJ2,
xlim=Moyenne-3*Variance**.5,Moyenne+3*Variance**.5,
ylim=Moyenne-3*Variance**.5,Moyenne+3*Variance**.5 )
plot(YJ1,YJ2,
xlim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5,Moyenne-3*Variance**.5,Moyenne+3*Variance**.5 ) ,
ylim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5,Moyenne-3*Variance**.5,Moyenne+3*Variance**.5 )
)
plot(YJ1,YJ2,
xlim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5) ,
ylim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5)
)
Moyenne-3*Variance**.5
Moyenne+3*Variance**.5
plot(YJ1,YJ2,
xlim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5) ,
ylim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5)
)
plot(YJ1,YJ2)
plot(YJ1,YJ2, xlim = c(0,200) )
plot(YJ1,YJ2,xlim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5) )
plot(YJ1,YJ2,xlim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5)
,ylim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5) )
YJ2
Moyenne<- 169
Variance <- 57
# Paires de jumeaux
Paires<-1000
YJ1 = rnorm(Paires, mean=Moyenne, sd=Variance**0.5 )
# Prenons un modèle pour générer la taille du second jumeau J2 = Pente x J1 + erreur
Pente<-0.7
YJ2<- YJ1*Pente + rnorm(Paires, mean=0.3*Moyenne, sd=((1-Pente)*Variance)**0.5 )
plot(YJ1,YJ2,xlim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5)
,ylim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5) )
abline(a=0, b=Pente)
V1 <-var(YJ1)
V2 <- var(YJ2)
Estim.pente <-cov(YJ1, YJ2) / V1
Estim.pente
plot(YJ1,YJ2,xlim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5)
,ylim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5) )
abline(a=0, b=Pente)
abline(a=0, b=Pente, col="red")
Pente
plot(YJ1,YJ2,xlim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5)
,ylim=c(Moyenne-3*Variance**.5,Moyenne+3*Variance**.5) )
abline( b=Pente, col="red")
plot(YJ1,YJ2,xlim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5)
,ylim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5) )
abline( b=Pente, col="red")
abline( a=0, b=Pente, col="red")
abline( a=Moyenne, b=Pente, col="red")
plot(YJ1,YJ2,xlim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5)
,ylim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5) )
abline( a=Moyenne, b=Pente, col="red")
abline( a=10, b=Pente, col="red")
abline( a=20, b=Pente, col="red")
abline( a=30, b=Pente, col="red")
abline( a=40, b=Pente, col="red")
abline( a=60, b=Pente, col="red")
summary(lm(YJ1 ~  YJ2 ))
# Paires de jumeaux
Paires<-1000
Moyenne<- 169
Variance <- 57
Paires<-1000
YJ1 = rnorm(Paires, mean=Moyenne, sd=Variance**0.5 )
# Prenons un modèle pour générer la taille du second jumeau J2 = Pente x J1 + erreur
Pente<-0.7
YJ2<- YJ1*Pente + rnorm(Paires, mean=0.3*Moyenne, sd=((1-Pente)*Variance)**0.5 )
plot(YJ1,YJ2,xlim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5)
,ylim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5) )
abline(a=60, b=Pente, col="red")
Paires<-1000
YJ1 = rnorm(Paires, mean=Moyenne, sd=Variance**0.5 )
Pente<-0.7
YJ2<- YJ1*Pente + rnorm(Paires, mean=(1-Pente)*Moyenne, sd=((1-Pente)*Variance)**0.5 )
mean(YJ2)
abline(a=0, b=Estim.pente, col="red")
plot(YJ1,YJ2,xlim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5)
,ylim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5) )
abline(a=0, b=Estim.pente, col="red")
abline(a=10, b=Estim.pente, col="red")
mean(YJ1)
mean(YJ1)
mean(YJ2)
? line
plot(YJ1,YJ2,xlim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5)
,ylim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5) )
line(x = c(mean(YJ1), mean(YJ1)+1) , y=c(mean(YJ2), mean(YJ2)+Pente )
)
mean(YJ2) - Pente *mean(YJ1)
abline(a=mean(YJ2) - Pente *mean(YJ1), b=Pente, col="red")
mean(YJ2)
Estim.pente <-cov(YJ1, YJ2) / V1
plot(YJ1,YJ2,xlim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5)
,ylim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5) )
abline(a=mean(YJ2) - Pente *mean(YJ1), b=Pente, col="red")
plot(YJ1,YJ2,xlim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5)
,ylim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5) )
# Ordonnée en 0 sachant que la régression passe par les deux moyennes
abline(a=  mean(YJ2) - Pente *mean(YJ1), b=Estim.pente, col="red")
YJ1 = rnorm(Paires, mean=Moyenne, sd=Variance**0.5 )
Pente<-0.7
YJ2<- YJ1*Pente + rnorm(Paires, mean=(1-Pente)*Moyenne, sd=((1-Pente)*Variance)**0.5 )
V1 <-var(YJ1)
V2 <- var(YJ2)
Estim.pente <-cov(YJ1, YJ2) / V1
plot(YJ1,YJ2,xlim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5)
,ylim=c(Moyenne-4*Variance**.5,Moyenne+4*Variance**.5) )
# Ordonnée en 0 sachant que la régression passe par les deux moyennes
abline(a=  mean(YJ2) - Estim.pente *mean(YJ1), b=Estim.pente, col="red")
a<-mean(YJ2) - Estim.pente *mean(YJ1)
abline(a= a , b=Estim.pente, col="red")
hist(YJ1)
library(QTLRel)
data(miscEx)
ids<- sample(pedF8$id[300:500],20)
oo<- cic(pedF8, ids=ids, df=Inf, msg=TRUE)
knitr::opts_chunk$set(echo = TRUE)
A<-read.table(C:/Users/david\Documents/nextcloud-ge2pop/Documents/ge2pop-Solace/epi 2020/EPO_2019-2020_Componenti della produzione.csv, header=TRUE, dec=".", sep=";")
A<-read.table("C:/Users/david\Documents/nextcloud-ge2pop/Documents/ge2pop-Solace/epi 2020/EPO_2019-2020_Componenti della
A<-read.table("C:/Users/david/Documents/nextcloud-ge2pop/Documents/ge2pop-Solace/epi 2020/EPO_2019-2020_Componenti della produzione.csv", header=TRUE, dec=".", sep=";")
", heder"
A
names(A)
A<-read.table("C:/Users/david/Documents/nextcloud-ge2pop/Documents/ge2pop-Solace/epi 2020/EPO_2019-2020_Componenti della produzione.csv", header=TRUE, dec=".", sep=";")
names(A)
hist(A$culm_lenght..cm.)
table(A$genotype)
A<-read.table("C:/Users/david/Documents/nextcloud-ge2pop/Documents/ge2pop-Solace/epi 2020/EPO_2019-2020_Componenti della produzione.csv", header=TRUE, dec=".", sep=";")
A
names(A)
table(A$genotype)
boxplot(culm_length ~ genotype, data=A)
boxplot(spike.lenght ~ genotype, data=A)
boxplot(spike.weight ~ genotype, data=A)
A$spike.weight>6
which(A$spike.weight>6)
Liste<-which(A$spike.weight>6)
A$spike.weight[Liste]<-NA
boxplot(spike.weight ~ genotype, data=A)
names(A)
A[1:3,]
names(A)
boxplot(culm_length ~ genotype, data=A)
boxplot(spikelet.p.spike ~ genotype, data=A)
Liste<-which(A$spikelet.p.spike>20)
A$spike.weight[Liste]<-NA
A<-read.table("C:/Users/david/Documents/nextcloud-ge2pop/Documents/ge2pop-Solace/epi 2020/EPO_2019-2020_Componenti della produzione.csv", header=TRUE, dec=".", sep=";")
A[1:3,]
names(A)
table(A$genotype)
Liste<-which(A$spike.weight>6)
A$spike.weight[Liste]<-NA
Liste<-which(A$spikelet.p.spike>20)
A$spikelet.p.spike[Liste]<-NA
boxplot(culm_length ~ genotype, data=A)
boxplot(spike.lenght ~ genotype, data=A)
boxplot(spike.weight ~ genotype, data=A)
boxplot(spikelet.p.spike ~ genotype, data=A)
names(A)
boxplot(kernel.p.pike ~ genotype, data=A)
boxplot(kernel.weight.spike ~ genotype, data=A)
names(A)
pairs(A[,c(6, 11)])
pairs(A[,c(6:11)])
pairs(A[,c(6:11)])
library(ggplot2)
sp <- ggplot(A, aes(x=culm_length, y=spike.weight)) + geom_point(shape=1)
sp
sp <- ggplot(A, aes(x=culm_length, y=spike.weight)) + geom_point(shape=1)
sp + facet_grid(genotype ~ .)
sp <- ggplot(A, aes(x=culm_length, y=spike.weight, fill=genotype)) + geom_point(shape=1)
sp
sp <- ggplot(A, aes(x=culm_length, y=spike.weight, col()=genotype)) + geom_point(shape=1)
sp <- ggplot(A, aes(x=culm_length, y=spike.weight, col=genotype)) + geom_point(shape=1)
sp
sp + facet_grid(. ~genotype  )
mod<- lm(culm_length ~ genotype, data=A)
mod
aov(mod)
summary(mod)
summary(mod)
anova(mod)
summary(mod)
liste<- which(A$genotype %in% c("ALTE", "BASSE"))
liste<- which(A$genotype %in% c("ALTE", "BASSE"))
subA<-A[liste,]
mod<- lm(culm_length ~ genotype, data=subA)
summary(mod)
anova(mod)
sp <- ggplot(A, aes(x=culm_length, col=genotype)) + geom_bar()
sp + facet_grid(. ~genotype  )
sp <- ggplot(A, aes(x=culm_length, col=genotype)) + geom_bar()
sp + facet_grid(genotype ~.  )
liste<- which(A$genotype %in% c("ALTE", "BASSE"))
subA<-A[liste,]
mod<- lm(culm_length ~ genotype, data=subA)
summary(mod)
names(A)
mod<- lm(spike.weight ~ genotype, data=subA)
summary(mod)
anova(mod)
summary(mod)
summary(mod)
sp <- ggplot(subA, aes(x=culm_length, col=genotype)) + geom_bar()
sp + facet_grid(genotype ~.  )
sp <- ggplot(subA, aes(x=spike.weight, col=genotype)) + geom_bar()
sp + facet_grid(genotype ~.  )
sp <- ggplot(A, aes(x=culm_length, y=spike.weight, col=genotype)) + geom_point(shape=1)
sp + facet_grid(. ~genotype  )
sp <- ggplot(subA, aes(x=culm_length, y=spike.weight, col=genotype)) + geom_point(shape=1)
sp + facet_grid(. ~genotype  )
sp <- ggplot(subA, aes(x=culm_length, y=spike.weight, col=genotype)) + geom_point(shape=1)
sp + facet_grid(genotype ~.  )
sp <- ggplot(A, aes(x=culm_length, y=spike.weight, col=genotype)) + geom_point(shape=1)
sp + facet_grid(genotype ~.  )
lm(spike.weight ~ culm_length , data=A)
corlm<-lm(spike.weight ~ culm_length , data=A)
aov(corlm)
summary(corlm)
corlm<-lm(spike.weight ~ culm_length*genotype, data=A)
summary(corlm)
corlm
corlm<-lm(spike.weight ~ genotype, data=A)
summary(corlm)
corlm<-lm(culm_length ~ genotype, data=A)
summary(corlm)
cache=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache.lazy = FALSE)
library("rstudioapi")   # mettre la directory en place
setwd(dirname(getActiveDocumentContext()$path)) # Set working directory to source file location
getwd()
rm(list = ls())
library(anyLib)
anyLib(c("data.table", "apercu", "mlmm.gwas", "corpcor","plyr"))
load("../../Data/GENOTYPES/BREEDWHEAT_on_durum_physic_WEW2.Rdata")
load("../data/GENOTYPES/BREEDWHEAT_on_durum_physic_WEW2.Rdata")
ap(BLAST)
BLAST[1,]
dim(BLAST)
load("../data/GENOTYPES/caract_SNP_ALL_PHYS.Rdata")
# breed wheat genotypes
file="../data/GENOTYPES/SG_EPO_complet.Rdata"
load(file)
dim(SG)
liste<-which(colnames(SG) %in% BLAST[,1])
length(liste)
ap(liste)
SG<-SG[,liste]
dim(SG)
file<-"../data/PHENOTYPES/BLUP_example.csv"
myY  <-read.table(file, head = TRUE, sep=";", dec=",")
names(myY)[1]<-"Taxa"
dim(myY)
myY[1:10, 1]
SG<-SG[which(rownames(SG) %in% myY[,1]),]
dim(SG)
ap(SG)
myY<-myY[which(myY[,1] %in% rownames(SG) ),]
dim(myY)
dim(SG)
genot<-SG
class(genot)
dim(genot)
ap(genot)
noms<-rownames(genot)
genot<-apply(genot,2,as.numeric)
rownames(genot)<-noms
genot.imp <- apply(genot, 2, function(x){
freq <- table(x)
x[is.na(x)] <- as.integer(names(which.max(freq)))
return(x)
})
p <- colMeans(genot.imp) / 2
q <- 1 - p
maf <- apply(cbind(p, q), 1, min)
hist(maf, col = "grey", main = "", breaks = 50, xlim = c(0, 0.5))
sum(maf < 0.5)
genot.ok <- genot.imp[, maf >= 0.05]
dim(genot.ok)
map<-BLAST[which(BLAST[,1] %in% colnames(genot.ok)),c(1,2,6)]
names(map)<-c("SNP","Chr","Pos")
head(map)
class(map)
dim(map)
ap(map)
map <- map[map$SNP %in% colnames(genot.ok), ]
map[,2] <-mapvalues(map[,2], from=c( "chrom",
"chr1A", "chr1B", "chr2A", "chr2B",
"chr3A", "chr3B", "chr4A", "chr4B",
"chr5A", "chr5B", "chr6A", "chr6B",
"chr7A", "chr7B")
, to=c("chrom", 1:14))
map[,2]<-as.numeric(map[,2])
dim(map)
summary(map)
head(map)
tail(map)
map <- map[order(map$Pos), ]
map <- map[order(map$Chr), ]
head(map)
tail(map)
rm(genot, genot.imp, maf, p, q)
names(myY)
pairs(myY[,2:6])
names(myY)
names(myY)
i<-2
hist(myY[,i], main = names(myY)[i])
y <- myY[,i]
names(myY)[i]
names(y) <- myY$Taxa
hist(y, col = "grey",  nclass=20, xlab = "BLUP biomasse", main=paste("Distribution of", names(myY)[i]))
y[which(y> 0.10)]<-NA
hist(y, col = "grey",  nclass=20, xlab = "BLUP biomasse", main=paste("Distribution of", names(myY)[i]))
summary(y)
genot.ok<-genot.ok[order(rownames(genot.ok)),]
y<-y[order(names(y))]
genot.loop<-genot.ok
if (length(which(is.na(y)))>0 ) {
liste<- which(is.na(y))
y <- y[-liste]
genot.loop<-genot.loop[-liste,]
#rownames(genot.loop)<-rownames(genot.ok)[-which(is.na(y))]
}
dim(genot.loop)
# on verifie que les deux fichiers sont dans le meme ordre et qu'il y en a autant, ca doit faire une droite
plot(match(rownames(genot.loop), names(y)))
genot.loop<-genot.loop[,map$SNP]
plot(match(map$SNP, colnames(genot.loop)))
p <- colMeans(genot.loop) / 2
q <- 1 - p
# Ici ca sera une Van Raden
genot.scaled <- scale(genot.loop, center = 2 * p, scale = sqrt(2 * p * q))
K <- tcrossprod(genot.scaled) / ncol(genot.scaled)
K <- make.positive.definite(K)
hist(K)
dim(K)
genot.scaled <- scale(genot.loop, center = 2 * p)
mygwas.gwas <- mlmm_allmodels(y, list(genot.scaled), list(K),
maxsteps = 4, threshold=1e-5)
manhattan.plot(res_mlmm)
res_mlmm <- mygwas.gwas
manhattan.plot(res_mlmm)
sel_XX = frommlmm_toebic(list(genot.scaled), res_mlmm)
res_eBIC = eBIC_allmodels(y, sel_XX, list(K), ncol(genot.scaled))
res_eBIC
res_threshold <- threshold_allmodels(threshold=1e-4, res_mlmm)
res_threshold
mip<-map
mip$Chr<-sprintf("%2d",mip$Chr)
manhattan.plot(res_mlmm, map = mip, steps = 1, hideCofactors = FALSE, chrToPlot = "all", unit = "bp")
sel_XXclass = fromeBICtoEstimation(sel_XX, res_eBIC, res_threshold)
effects = Estimation_allmodels(y, sel_XXclass, list(K))
effects
mark_list<-names(sel_XXclass)
mark_list[1]
genotypes.boxplot(genot.scaled, y , mark_list[m], effects)
m<-1
genotypes.boxplot(genot.scaled, y , mark_list[m], effects)
table(genot.loop[,mark_list[m]])
length(res_mlmm)
Pval<-res_mlmm[[1]]
length(Pval)
names(Pval)
PVal_2<-res_mlmm[[2]]
length(PVal_2)
max(-log10(PVal_2))
PVal_3<-res_mlmm[[3]]
length(PVal_3)
max(-log10(PVal_3))
PVal <- PVal_2
dim(PVal)
ap(PVal[order(-log10(PVal),decreasing = TRUE)])
PVal<-PVal[order(-log10(PVal),decreasing = TRUE)]
seuil <- 4
liste <-which(-log10(PVal)>=seuil)
SNP_0<-names(PVal[liste])
SNP_0
SNP_0<-gsub(pattern = "selec_","",SNP_0)
caract_SNP_ALL_PHYS[which(caract_SNP_ALL_PHYS[,2] %in% SNP_0),c(2,18,22,28)]
ap(SNP_0)
#  le max en première colonne
C<-cor(genot.ok[,SNP_0])**2
C
j<-2
C<-cor(genot.ok[,SNP_0[j]], genot.ok)**2
liste<-which(C>0.5)
liste<-colnames(C)[liste]
caract_SNP_ALL_PHYS[which(caract_SNP_ALL_PHYS[,2] %in% SNP_0[j]),c(2,18,22,28)]
caract_SNP_ALL_PHYS[which(caract_SNP_ALL_PHYS[,2] %in% liste),c(2,18,22,28)]
load("../data/GENOTYPES/BREEDWHEAT_on_durum_physic_WEW2.Rdata")
ap(BLAST)
BLAST[1,]
dim(BLAST)
BLAST[1,]
ap(BLAST)
